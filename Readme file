# Border Crossing Data ETL Pipeline with PostgreSQL and Data Visualization

## Project Overview
This project demonstrates an ETL (Extract, Transform, Load) pipeline using the Border Crossing Entry dataset. The data is extracted from a CSV file, transformed using Python, and loaded into a PostgreSQL database. Additionally, data visualizations are created using Python and pgAdmin.

## Technologies Used
- **Python**: pandas, psycopg2, matplotlib, seaborn
- **PostgreSQL**: Database management and queries
- **pgAdmin**: GUI for PostgreSQL
- **VS Code**: Development environment

## Installed Libraries
To run this project, install the required libraries using:
pip install pandas psycopg2 matplotlib seaborn

## Setting Up PostgreSQL
1. **Install PostgreSQL**:
   brew install postgresql@14

2. **Start PostgreSQL service**:
   brew services start postgresql@14

3. **Access PostgreSQL**:
   psql postgres
4. **Create a new database**:
   CREATE DATABASE border_data

5. **Set up a new user**:
   CREATE USER 'Your Username' WITH PASSWORD 'Your password';
   GRANT ALL PRIVILEGES ON DATABASE border_data TO  your username

## ETL Pipeline Steps
- **Extract**: Reads data from Border_Crossing_Entry_Data.csv.
- **Transform**:
  - Handles missing values and duplicates.
  - Converts date formats to `YYYY-MM-DD`.
- **Load**:
  - Creates a table in PostgreSQL and loads the cleaned data.

## Data Visualization
- **Python**: Bar charts and trend analysis using matplotlib and seaborn.
- **pgAdmin**: Direct visualizations through SQL queries and built-in tools.

## Example SQL Queries
- **Top 5 Ports by Crossings**:
  ```sql
  SELECT port_name, SUM(value) AS total_crossings
  FROM border_crossings
  GROUP BY port_name
  ORDER BY total_crossings DESC
  LIMIT 5;
  ```
- **Monthly Trends**:
  ```sql
  SELECT DATE_TRUNC('month', date) AS month, SUM(value) AS total_crossings
  FROM border_crossings
  GROUP BY month
  ORDER BY month;
  ```
- **State-wise Crossings**:
  ```sql
  SELECT state, SUM(value) AS total_crossings
  FROM border_crossings
  GROUP BY state
  ORDER BY total_crossings DESC;
  ```
you can try different queries with your CSV file. 

